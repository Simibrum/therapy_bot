# Generated by CodiumAI


class TestReadUsersMe:
    #  Return details of the current user.

    def test_return_details_of_current_user(
        self, authenticated_test_client, user_instance
    ):
        response = authenticated_test_client.get("/users/me")
        assert response.status_code == 200
        assert response.json() == {
            "id": user_instance.id,
            "username": user_instance.username,
            "email": user_instance.email,
            "is_active": user_instance.is_active,
            "first_name": user_instance.first_name,
            "last_name": user_instance.last_name,
            "address": user_instance.address,
            "city": user_instance.city,
            "country": user_instance.country,
            "age": user_instance.age,
        }

    def test_user_is_authenticated(self, authenticated_test_client):
        response = authenticated_test_client.get("/users/me")
        assert response.status_code == 200
        assert response.json()

    def test_user_is_active(self, authenticated_test_client):
        response = authenticated_test_client.get("/users/me")
        assert response.status_code == 200
        assert response.json()["is_active"] is True

    def test_user_is_not_authenticated(self, test_client, user_instance):
        response = test_client.get("/users/me")
        assert response.status_code == 401

    #  User is not active.
    def test_user_is_not_active(
        self, authenticated_test_client, user_instance, shared_session
    ):
        user_instance.is_active = False
        shared_session.commit()
        response = authenticated_test_client.get("/users/me")
        assert response.status_code == 403

    #  User is anonymous.
    def test_user_is_anonymous(self, test_client, user_instance):
        response = test_client.get("/users/me")
        assert response.status_code == 401
