# Generated by CodiumAI

import pytest  # noqa: F401
from logic.graph_processing import generate_candidate_nodes
from spacy.language import Language


class TestGenerateCandidateNodes:
    """Tests for the generate_candidate_nodes function."""

    #  The function correctly extracts entities from the input text and generates candidate nodes for each entity.
    def test_extract_entities(self, test_nlp: Language) -> None:
        """Test if the function correctly extracts entities and generates candidate nodes."""
        # Create a spaCy Doc object with entities
        text = "Apple is looking at buying U.K. startup for $1 billion"
        doc = test_nlp(text)

        # Call the generate_candidate_nodes function
        nodes = generate_candidate_nodes(doc)

        # Check if the function correctly extracts entities and generates candidate nodes
        assert len(nodes) == 3
        assert nodes[0]["text"] == "Apple"
        assert nodes[0]["start_char"] == 0
        assert nodes[0]["end_char"] == 5
        assert nodes[0]["start_token"] == 0
        assert nodes[0]["end_token"] == 1
        assert nodes[0]["sentence_index"] == 0
        assert nodes[0]["label"] == "ORG"

        assert nodes[1]["text"] == "U.K."
        assert nodes[1]["start_char"] == 27
        assert nodes[1]["end_char"] == 31
        assert nodes[1]["start_token"] == 5
        assert nodes[1]["end_token"] == 6
        assert nodes[1]["sentence_index"] == 0
        assert nodes[1]["label"] == "GPE"

        assert nodes[2]["text"] == "$1 billion"
        assert nodes[2]["start_char"] == 44
        assert nodes[2]["end_char"] == 54
        assert nodes[2]["start_token"] == 8
        assert nodes[2]["end_token"] == 11
        assert nodes[2]["sentence_index"] == 0
        assert nodes[2]["label"] == "MONEY"

    #  The function returns a list of dictionaries, where each dictionary represents a
    #  candidate node and contains the text, start and end character indices, start and end token indices,
    #  sentence index, and label of the entity.
    def test_return_format(self, test_nlp: Language) -> None:
        """Test if the function returns a list of dictionaries with the correct format."""
        # Create a spaCy Doc object with entities
        text = "Apple is looking at buying U.K. startup for $1 billion"
        doc = test_nlp(text)

        # Call the generate_candidate_nodes function
        nodes = generate_candidate_nodes(doc)

        # Check if the function returns a list of dictionaries with the correct format
        assert isinstance(nodes, list)
        assert all(isinstance(node, dict) for node in nodes)
        assert all("text" in node for node in nodes)
        assert all("start_char" in node for node in nodes)
        assert all("end_char" in node for node in nodes)
        assert all("start_token" in node for node in nodes)
        assert all("end_token" in node for node in nodes)
        assert all("sentence_index" in node for node in nodes)
        assert all("label" in node for node in nodes)

    def test_chat_example(self, test_nlp: Language) -> None:
        """Test if the function correctly handles multiple entities with the same text but different labels."""
        # Create a spaCy Doc object with entities
        text = "And then I said to Karen, `I wish I lived in Slough rather than Newcastle.'"
        doc = test_nlp(text)

        # Call the generate_candidate_nodes function
        nodes = generate_candidate_nodes(doc)

        # Check if the function correctly handles multiple entities with the same text but different labels
        assert len(nodes) == 3
        assert nodes[0]["text"] == "Karen"
        assert nodes[0]["label"] == "PERSON"
        assert nodes[1]["text"] == "Slough"
        assert nodes[1]["label"] == "GPE"
        assert nodes[2]["text"] == "Newcastle"
        assert nodes[2]["label"] == "GPE"

    def test_multiple_sentences(self, test_nlp: Language) -> None:
        """Test if the function correctly handles multiple sentences in the input text."""
        # Create a spaCy Doc object with entities
        text = "I love Paris. Berlin is also a great city."
        doc = test_nlp(text)

        # Call the generate_candidate_nodes function
        nodes = generate_candidate_nodes(doc)

        # Check if the function correctly handles multiple sentences in the input text
        assert len(nodes) == 2
        assert nodes[0]["text"] == "Paris"
        assert nodes[0]["label"] == "GPE"
        assert nodes[0]["sentence_index"] == 0
        assert nodes[1]["text"] == "Berlin"
        assert nodes[1]["label"] == "GPE"
        assert nodes[1]["sentence_index"] == 1
