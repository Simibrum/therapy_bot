# Generated by CodiumAI
from __future__ import annotations

import pytest
from logic.graph_processing import generate_candidate_node_ids


@pytest.fixture()
def nodes() -> list[dict]:
    """Create a list of nodes with unique start tokens."""
    return [
        {"text": "node1", "start_char": 0, "end_char": 5, "start_token": 0},
        {"text": "node2", "start_char": 6, "end_char": 11, "start_token": 1},
        {"text": "node3", "start_char": 12, "end_char": 17, "start_token": 2},
    ]


class TestGenerateCandidateNodeIds:
    """Tests for the generate_candidate_node_ids function."""

    #  Generates unique node IDs for each node in the input list of nodes.
    def test_unique_node_ids(self, nodes: list[dict]) -> None:
        """Create a list of nodes with unique start tokens."""
        # Call the generate_candidate_node_ids function
        node_ids = generate_candidate_node_ids(nodes)

        # Check that each node has a unique node ID
        assert len(node_ids) == len(nodes)
        assert len(set(node_ids.values())) == len(nodes)

    #  Returns a dictionary with node IDs as values and start tokens as keys.
    def test_node_id_dictionary(self, nodes: list[dict]) -> None:
        """Create a list of nodes with unique start tokens."""
        # Call the generate_candidate_node_ids function
        node_ids = generate_candidate_node_ids(nodes)

        # Check that the node IDs dictionary has the correct keys and values
        assert isinstance(node_ids, dict)
        assert len(node_ids) == len(nodes)
        for node in nodes:
            assert node["start_token"] in node_ids
            assert isinstance(node_ids[node["start_token"]], str)

    #  Handles an empty list of nodes.
    def test_empty_node_list(self, nodes: list[dict]) -> None:
        """Create an empty list of nodes."""
        nodes = []

        # Call the generate_candidate_node_ids function
        node_ids = generate_candidate_node_ids(nodes)

        # Check that the node IDs dictionary is empty
        assert isinstance(node_ids, dict)
        assert len(node_ids) == 0

    def test_duplicate_name_tokens(self) -> None:
        """Create a list of nodes with duplicate end tokens."""
        nodes = [
            {"text": "node1", "start_char": 0, "end_char": 5, "start_token": 0},
            {"text": "node1", "start_char": 6, "end_char": 11, "start_token": 1},
            {"text": "node1", "start_char": 12, "end_char": 5, "start_token": 2},
        ]

        # Call the generate_candidate_node_ids function
        node_ids = generate_candidate_node_ids(nodes)

        # Check that the node IDs dictionary has the correct keys and values
        assert isinstance(node_ids, dict)
        assert len(node_ids) == len(nodes)
        assert node_ids[0] != node_ids[2]
