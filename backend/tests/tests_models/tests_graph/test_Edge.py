"""Tests for graph edges."""
from __future__ import annotations

from typing import TYPE_CHECKING

import numpy as np
import pytest
from models.graph.edge import Edge

if TYPE_CHECKING:
    from models.graph.node import Node
    from models.user import User

# Generated by CodiumAI


class TestEdge:
    """Test the Edge model."""

    def test_edge_creation_with_valid_parameters(self, multiple_nodes: list[Node], user_instance: User) -> None:
        """Edge object can be created with valid parameters."""
        edge = Edge(
            id=1,
            user_id=user_instance.id,
            from_node_id=multiple_nodes[0].id,
            to_node_id=multiple_nodes[1].id,
            type="type",
            description="description",
        )
        assert edge.id == 1
        assert edge.user_id == 1
        assert edge.from_node_id == 1
        assert edge.to_node_id == 2
        assert edge.type == "type"
        assert edge.description == "description"

    #  Edge object can have its attributes updated
    def test_edge_attribute_update(self) -> None:
        """Edge object attributes can be updated."""
        edge = Edge(
            id=1,
            user_id=1,
            from_node_id=1,
            to_node_id=2,
            type="type",
            description="description",
        )
        edge.id = 2
        edge.user_id = 2
        edge.from_node_id = 2
        edge.to_node_id = 3
        edge.type = "new_type"
        edge.description = "new_description"
        assert edge.id == 2
        assert edge.user_id == 2
        assert edge.from_node_id == 2
        assert edge.to_node_id == 3
        assert edge.type == "new_type"
        assert edge.description == "new_description"

    #  Edge object can have its vector attribute set and retrieved
    def test_edge_vector_set_and_retrieve(self) -> None:
        """Edge object can have its vector attribute set and retrieved."""
        edge = Edge(
            id=1,
            user_id=1,
            from_node_id=1,
            to_node_id=2,
            type="type",
            description="description",
        )
        vector = np.array([1, 2, 3])
        edge.vector = vector
        assert np.array_equal(edge.vector, vector)

    #  Edge object can have its vector attribute set to None
    def test_edge_vector_set_to_none(self) -> None:
        """Edge object can have its vector attribute set to None."""
        edge = Edge(
            id=1,
            user_id=1,
            from_node_id=1,
            to_node_id=2,
            type="type",
            description="description",
        )
        edge.vector = None
        assert edge.vector is None

    #  Edge object can have its vector attribute set to an empty numpy array
    def test_edge_vector_set_to_empty_array(self) -> None:
        """Edge object can have its vector attribute set to an empty numpy array."""
        edge = Edge(
            id=1,
            user_id=1,
            from_node_id=1,
            to_node_id=2,
            type="type",
            description="description",
        )
        vector = np.array([])
        edge.vector = vector
        assert edge.vector is None

    #  TODO(Ben Hoyle) implement validation so these tests can be uncommented

    # #  Edge object cannot be created with invalid parameters
    # def test_edge_creation_with_invalid_parameters(self):
    #     with pytest.raises(TypeError):
    #         Edge(id="1", user_id=1, from_node_id=1, to_node_id=2, type="type", description="description")
    #     with pytest.raises(TypeError):
    #         Edge(id=1, user_id="1", from_node_id=1, to_node_id=2, type="type", description="description")
    #     with pytest.raises(TypeError):
    #         Edge(id=1, user_id=1, from_node_id="1", to_node_id=2, type="type", description="description")
    #     with pytest.raises(TypeError):
    #         Edge(id=1, user_id=1, from_node_id=1, to_node_id="2", type="type", description="description")
    #
    # #  Edge object cannot have its attributes updated with invalid values
    # def test_edge_attribute_update_with_invalid_values(self):
    #     edge = Edge(id=1, user_id=1, from_node_id=1, to_node_id=2, type="type", description="description")
    #     with pytest.raises(TypeError):
    #         edge.id = "2"
    #     with pytest.raises(TypeError):
    #         edge.user_id = "2"
    #     with pytest.raises(TypeError):
    #         edge.from_node_id = "2"
    #     with pytest.raises(TypeError):
    #         edge.to_node_id = "3"

    #  Edge object cannot have its vector attribute set to a non-numpy array
    def test_edge_vector_set_to_non_numpy_array(self) -> None:
        """Edge object cannot have its vector attribute set to a non-numpy array."""
        edge = Edge(
            id=1,
            user_id=1,
            from_node_id=1,
            to_node_id=2,
            type="type",
            description="description",
        )
        with pytest.raises(TypeError):
            edge.vector = [1, 2, 3]

    #  Edge object cannot have its vector attribute set to a numpy array with non-numeric elements
    def test_edge_vector_set_to_numpy_array_with_non_numeric_elements(self) -> None:
        """Edge object cannot have its vector attribute set to a numpy array with non-numeric elements."""
        edge = Edge(
            id=1,
            user_id=1,
            from_node_id=1,
            to_node_id=2,
            type="type",
            description="description",
        )
        with pytest.raises(ValueError):
            edge.vector = np.array([1, 2, "3"])

    #  Edge object cannot have its vector attribute set to a numpy array with complex elements
    # def test_edge_vector_set_to_numpy_array_with_complex_elements(self):
    #     edge = Edge(id=1, user_id=1, from_node_id=1, to_node_id=2, type="type", description="description")
    #     with pytest.raises(ValueError):
    #         edge.vector = np.array([1+2j, 2+3j, 3+4j])
