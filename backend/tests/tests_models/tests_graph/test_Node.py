# Generated by CodiumAI
import numpy as np
import pytest

from models.graph.node import Node


class TestNode:
    #  Node object can be initialized with a label
    def test_initialized_with_label(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        assert node.label == "label"
        assert node.is_vectorised is False
        assert node.vector is None

    def test_representation_as_string(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        assert str(node) == "Node(label=label, id=None, user_id=1, type=None)"

    #  Node object can have a vector assigned to it
    def test_vector_assignment(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        vector = np.array([1.0, 2.0, 3.0])
        node.vector = vector
        assert node.is_vectorised is True
        assert np.array_equal(node.vector, vector)

    #  Node object can have its vector retrieved as a numpy array
    def test_vector_retrieval(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        vector = np.array([1, 2, 3])
        node.vector = vector
        assert np.array_equal(node.vector, vector)

    #  Node object can have its vector set to None
    def test_vector_set_to_none(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        vector = np.array([1, 2, 3])
        node.vector = vector
        assert node.is_vectorised is True
        node.vector = None
        assert node.is_vectorised is False
        assert node.vector is None

    #  Node object can be initialized with a label containing newline characters
    def test_initialized_with_newline_label(self, user_instance):
        node = Node("label\nwith\nnewlines", user_id=user_instance.id)
        assert node.label == "labelnewlinewithnewlinenewlines"

    #  Node object can have its vector set to a numpy array with a single element
    def test_vector_set_to_single_element_array(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        vector = np.array([1])
        node.vector = vector
        assert node.is_vectorised is True
        assert np.array_equal(node.vector, vector)

    #  Node object can have its vector set to a numpy array with a large number of elements
    def test_vector_set_to_large_array(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        vector = np.random.rand(1000)
        node.vector = vector
        assert node.is_vectorised is True
        assert np.array_equal(node.vector, vector)

    #  Node object can have its vector set to a numpy array with negative values
    def test_vector_set_to_negative_values_array(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        vector = np.array([-1, -2, -3])
        node.vector = vector
        assert node.is_vectorised is True
        assert np.array_equal(node.vector, vector)

    #  Node object can have its vector set to a numpy array with non-numeric values
    def test_vector_set_to_non_numeric_values_array(self, user_instance):
        node = Node("label", user_id=user_instance.id)
        vector = np.array(["a", "b", "c"])
        with pytest.raises(ValueError):
            node.vector = vector
